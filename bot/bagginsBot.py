import asyncio
import os
import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from bot.Database.db import session_maker
from bot.Database.db import Customer
from rec_bot import generate_recommendations
from rec_bot import get_customer_info
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv('token')
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class ProfileState(StatesGroup):
    waiting_for_username = State()
    waiting_for_telegram_name = State()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot_errors.log"),  # –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Baggins Coffee! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!üéÅ")
    await message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã, –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –≤–≤–µ—Å—Ç–∏ id, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤ –ª—é–±–∏–º–æ–π –∫–æ—Ñ–µ–π–Ω–µ!‚òïÔ∏è")
    start_button = InlineKeyboardButton(text="‚å®Ô∏è–í–≤–µ—Å—Ç–∏ id", callback_data="get_id")

    feedback_button = InlineKeyboardButton(text="üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [start_button],
        [feedback_button]])

    await message.answer("–£ —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤—ã–±–æ—Ä —Å —á–µ–º –ø–∏—Ç—å –∫–æ—Ñ–µ ü•ê", reply_markup=keyboard)




class IdState(StatesGroup):
    waiting_for_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query(F.data == 'get_id')
async def profile(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    async with session_maker() as session:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLAlchemy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(select(Customer).filter(Customer.tg_id == user_id))
            user = result.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if user:
                await callback_query.message.answer(
                '–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à id, –∂–¥–∏—Ç–µ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏–π!'
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
                await callback_query.message.answer(
                    "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ —Å–æ–æ–±—â–∏–ª–∏ –Ω–∞–º –≤–∞—à id. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à id:"
                )
                await state.set_state(ProfileState.waiting_for_username)
        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username
@dp.message(ProfileState.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à id")
    user_id = message.from_user.id
    CS_id = message.text
    async with session_maker() as session:
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            customer = Customer(customer_id=CS_id, tg_id=user_id)
            session.add(customer)
            await session.commit()

            await message.answer(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n"
                f"–°–ø–∞—Å–∏–±–æ, –ø–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞—Å—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥ NewBagginsUser! –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ—Ñ–µ ‚òïÔ∏è"
                f"–í–∞—à id: {CS_id}\n"
            )
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    await state.clear()






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–∞–π–ª
def save_feedback_to_file(feedback_text, user_id):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    folder = 'feedbacks'  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
    if not os.path.exists(folder):
        os.makedirs(folder)  # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    file_path = os.path.join(folder, 'feedbacks.txt')
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
    with open(file_path, 'a', encoding='utf-8') as file:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ –≤ —Ñ–∞–π–ª
        file.write(f"–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{feedback_text}\n\n")

@dp.callback_query(F.data == 'feedback')
async def handle_feedback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackState.waiting_for_feedback)

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()


@dp.message(FeedbackState.waiting_for_feedback)
async def save_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Ñ–∞–π–ª
        save_feedback_to_file(feedback_text, user_id)

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
    finally:
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è


# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def send_weekly_recommendations():
    async with session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
            result = await session.execute(select(Customer))
            customers = result.scalars().all()

            for customer in customers:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                customer_data = get_customer_info(customer.customer_id)
                recommendations = generate_recommendations(customer_data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                for key, value in recommendations.items():
                    await bot.send_message(chat_id=customer.tg_id, text=value)
            print(f"[{datetime.now()}] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def setup_scheduler():
    # –ó–∞–¥–∞—á–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    scheduler.add_job(send_weekly_recommendations, 'interval', minutes = 1, start_date=datetime.now())
    scheduler.start()

async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    setup_scheduler()
    await dp.start_polling(bot)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
